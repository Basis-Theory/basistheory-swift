//
// TenantInvitationResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TenantInvitationResponse: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var tenantId: UUID?
    public var email: String?
    public var status: TenantInvitationStatus?
    public var expiresAt: Date?
    public var createdBy: UUID?
    public var createdAt: Date?
    public var modifiedBy: UUID?
    public var modifiedAt: Date?

    public init(id: UUID? = nil, tenantId: UUID? = nil, email: String? = nil, status: TenantInvitationStatus? = nil, expiresAt: Date? = nil, createdBy: UUID? = nil, createdAt: Date? = nil, modifiedBy: UUID? = nil, modifiedAt: Date? = nil) {
        self.id = id
        self.tenantId = tenantId
        self.email = email
        self.status = status
        self.expiresAt = expiresAt
        self.createdBy = createdBy
        self.createdAt = createdAt
        self.modifiedBy = modifiedBy
        self.modifiedAt = modifiedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case tenantId = "tenant_id"
        case email
        case status
        case expiresAt = "expires_at"
        case createdBy = "created_by"
        case createdAt = "created_at"
        case modifiedBy = "modified_by"
        case modifiedAt = "modified_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try container.encodeIfPresent(modifiedAt, forKey: .modifiedAt)
    }
}

