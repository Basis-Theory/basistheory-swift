//
// TokenServiceProviderDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct TokenServiceProviderDetails: Codable, JSONEncodable, Hashable {

    public var tsp: String?
    public var authMethod: String?
    public var messageId: String?
    public var eciIndicator: String?
    public var assuranceDetails: AssuranceDetails?
    public var transactionId: String?
    public var currencyCode: String?
    public var transactionAmount: Int64?
    public var cardholderName: String?
    public var deviceManufacturerIdentifier: String?
    public var paymentDataType: String?
    public var merchantTokenIdentifier: String?
    public var authenticationResponses: [AuthenticationResponse]?
    public var status: String?

    public init(tsp: String? = nil, authMethod: String? = nil, messageId: String? = nil, eciIndicator: String? = nil, assuranceDetails: AssuranceDetails? = nil, transactionId: String? = nil, currencyCode: String? = nil, transactionAmount: Int64? = nil, cardholderName: String? = nil, deviceManufacturerIdentifier: String? = nil, paymentDataType: String? = nil, merchantTokenIdentifier: String? = nil, authenticationResponses: [AuthenticationResponse]? = nil, status: String? = nil) {
        self.tsp = tsp
        self.authMethod = authMethod
        self.messageId = messageId
        self.eciIndicator = eciIndicator
        self.assuranceDetails = assuranceDetails
        self.transactionId = transactionId
        self.currencyCode = currencyCode
        self.transactionAmount = transactionAmount
        self.cardholderName = cardholderName
        self.deviceManufacturerIdentifier = deviceManufacturerIdentifier
        self.paymentDataType = paymentDataType
        self.merchantTokenIdentifier = merchantTokenIdentifier
        self.authenticationResponses = authenticationResponses
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case tsp
        case authMethod = "auth_method"
        case messageId = "message_id"
        case eciIndicator = "eci_indicator"
        case assuranceDetails = "assurance_details"
        case transactionId = "transaction_id"
        case currencyCode = "currency_code"
        case transactionAmount = "transaction_amount"
        case cardholderName = "cardholder_name"
        case deviceManufacturerIdentifier = "device_manufacturer_identifier"
        case paymentDataType = "payment_data_type"
        case merchantTokenIdentifier = "merchant_token_identifier"
        case authenticationResponses = "authentication_responses"
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encodeIfPresent(tsp, forKey: .tsp)
        try containerEncoder.encodeIfPresent(authMethod, forKey: .authMethod)
        try containerEncoder.encodeIfPresent(messageId, forKey: .messageId)
        try containerEncoder.encodeIfPresent(eciIndicator, forKey: .eciIndicator)
        try containerEncoder.encodeIfPresent(assuranceDetails, forKey: .assuranceDetails)
        try containerEncoder.encodeIfPresent(transactionId, forKey: .transactionId)
        try containerEncoder.encodeIfPresent(currencyCode, forKey: .currencyCode)
        try containerEncoder.encodeIfPresent(transactionAmount, forKey: .transactionAmount)
        try containerEncoder.encodeIfPresent(cardholderName, forKey: .cardholderName)
        try containerEncoder.encodeIfPresent(deviceManufacturerIdentifier, forKey: .deviceManufacturerIdentifier)
        try containerEncoder.encodeIfPresent(paymentDataType, forKey: .paymentDataType)
        try containerEncoder.encodeIfPresent(merchantTokenIdentifier, forKey: .merchantTokenIdentifier)
        try containerEncoder.encodeIfPresent(authenticationResponses, forKey: .authenticationResponses)
        try containerEncoder.encodeIfPresent(status, forKey: .status)
    }
}

