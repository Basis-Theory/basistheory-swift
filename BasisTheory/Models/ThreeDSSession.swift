//
// ThreeDSSession.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ThreeDSSession: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var tenantId: UUID?
    public var panTokenId: String?
    public var cardBrand: String?
    public var expirationDate: Date?
    public var createdDate: Date?
    public var createdBy: UUID?
    public var modifiedDate: Date?
    public var modifiedBy: UUID?
    public var device: String?
    public var deviceInfo: ThreeDSDeviceInfo?
    public var version: ThreeDSVersion?
    public var method: ThreeDSMethod?
    public var authentication: ThreeDSAuthentication?

    public init(id: UUID? = nil, tenantId: UUID? = nil, panTokenId: String? = nil, cardBrand: String? = nil, expirationDate: Date? = nil, createdDate: Date? = nil, createdBy: UUID? = nil, modifiedDate: Date? = nil, modifiedBy: UUID? = nil, device: String? = nil, deviceInfo: ThreeDSDeviceInfo? = nil, version: ThreeDSVersion? = nil, method: ThreeDSMethod? = nil, authentication: ThreeDSAuthentication? = nil) {
        self.id = id
        self.tenantId = tenantId
        self.panTokenId = panTokenId
        self.cardBrand = cardBrand
        self.expirationDate = expirationDate
        self.createdDate = createdDate
        self.createdBy = createdBy
        self.modifiedDate = modifiedDate
        self.modifiedBy = modifiedBy
        self.device = device
        self.deviceInfo = deviceInfo
        self.version = version
        self.method = method
        self.authentication = authentication
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case tenantId = "tenant_id"
        case panTokenId = "pan_token_id"
        case cardBrand = "card_brand"
        case expirationDate = "expiration_date"
        case createdDate = "created_date"
        case createdBy = "created_by"
        case modifiedDate = "modified_date"
        case modifiedBy = "modified_by"
        case device
        case deviceInfo = "device_info"
        case version
        case method
        case authentication
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encodeIfPresent(id, forKey: .id)
        try containerEncoder.encodeIfPresent(tenantId, forKey: .tenantId)
        try containerEncoder.encodeIfPresent(panTokenId, forKey: .panTokenId)
        try containerEncoder.encodeIfPresent(cardBrand, forKey: .cardBrand)
        try containerEncoder.encodeIfPresent(expirationDate, forKey: .expirationDate)
        try containerEncoder.encodeIfPresent(createdDate, forKey: .createdDate)
        try containerEncoder.encodeIfPresent(createdBy, forKey: .createdBy)
        try containerEncoder.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try containerEncoder.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try containerEncoder.encodeIfPresent(device, forKey: .device)
        try containerEncoder.encodeIfPresent(deviceInfo, forKey: .deviceInfo)
        try containerEncoder.encodeIfPresent(version, forKey: .version)
        try containerEncoder.encodeIfPresent(method, forKey: .method)
        try containerEncoder.encodeIfPresent(authentication, forKey: .authentication)
    }
}

