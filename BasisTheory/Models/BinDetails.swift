//
// BinDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BinDetails: Codable, JSONEncodable, Hashable {

    public var cardBrand: String?
    public var type: String?
    public var prepaid: Bool?
    public var cardSegmentType: String?
    public var bank: BinDetailsBank?
    public var product: BinDetailsProduct?
    public var country: BinDetailsCountry?
    public var reloadable: Bool?
    public var panOrToken: String?
    public var accountUpdater: Bool?
    public var alm: Bool?
    public var domesticOnly: Bool?
    public var gamblingBlocked: Bool?
    public var level2: Bool?
    public var level3: Bool?
    public var issuerCurrency: String?
    public var comboCard: String?
    public var binLength: Int?
    public var authentication: AnyCodable?
    public var cost: AnyCodable?

    public init(cardBrand: String? = nil, type: String? = nil, prepaid: Bool? = nil, cardSegmentType: String? = nil, bank: BinDetailsBank? = nil, product: BinDetailsProduct? = nil, country: BinDetailsCountry? = nil, reloadable: Bool? = nil, panOrToken: String? = nil, accountUpdater: Bool? = nil, alm: Bool? = nil, domesticOnly: Bool? = nil, gamblingBlocked: Bool? = nil, level2: Bool? = nil, level3: Bool? = nil, issuerCurrency: String? = nil, comboCard: String? = nil, binLength: Int? = nil, authentication: AnyCodable? = nil, cost: AnyCodable? = nil) {
        self.cardBrand = cardBrand
        self.type = type
        self.prepaid = prepaid
        self.cardSegmentType = cardSegmentType
        self.bank = bank
        self.product = product
        self.country = country
        self.reloadable = reloadable
        self.panOrToken = panOrToken
        self.accountUpdater = accountUpdater
        self.alm = alm
        self.domesticOnly = domesticOnly
        self.gamblingBlocked = gamblingBlocked
        self.level2 = level2
        self.level3 = level3
        self.issuerCurrency = issuerCurrency
        self.comboCard = comboCard
        self.binLength = binLength
        self.authentication = authentication
        self.cost = cost
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cardBrand = "card_brand"
        case type
        case prepaid
        case cardSegmentType = "card_segment_type"
        case bank
        case product
        case country
        case reloadable
        case panOrToken = "pan_or_token"
        case accountUpdater = "account_updater"
        case alm
        case domesticOnly = "domestic_only"
        case gamblingBlocked = "gambling_blocked"
        case level2
        case level3
        case issuerCurrency = "issuer_currency"
        case comboCard = "combo_card"
        case binLength = "bin_length"
        case authentication
        case cost
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encodeIfPresent(cardBrand, forKey: .cardBrand)
        try containerEncoder.encodeIfPresent(type, forKey: .type)
        try containerEncoder.encodeIfPresent(prepaid, forKey: .prepaid)
        try containerEncoder.encodeIfPresent(cardSegmentType, forKey: .cardSegmentType)
        try containerEncoder.encodeIfPresent(bank, forKey: .bank)
        try containerEncoder.encodeIfPresent(product, forKey: .product)
        try containerEncoder.encodeIfPresent(country, forKey: .country)
        try containerEncoder.encodeIfPresent(reloadable, forKey: .reloadable)
        try containerEncoder.encodeIfPresent(panOrToken, forKey: .panOrToken)
        try containerEncoder.encodeIfPresent(accountUpdater, forKey: .accountUpdater)
        try containerEncoder.encodeIfPresent(alm, forKey: .alm)
        try containerEncoder.encodeIfPresent(domesticOnly, forKey: .domesticOnly)
        try containerEncoder.encodeIfPresent(gamblingBlocked, forKey: .gamblingBlocked)
        try containerEncoder.encodeIfPresent(level2, forKey: .level2)
        try containerEncoder.encodeIfPresent(level3, forKey: .level3)
        try containerEncoder.encodeIfPresent(issuerCurrency, forKey: .issuerCurrency)
        try containerEncoder.encodeIfPresent(comboCard, forKey: .comboCard)
        try containerEncoder.encodeIfPresent(binLength, forKey: .binLength)
        try containerEncoder.encodeIfPresent(authentication, forKey: .authentication)
        try containerEncoder.encodeIfPresent(cost, forKey: .cost)
    }
}

