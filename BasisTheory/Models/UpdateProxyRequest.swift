//
// UpdateProxyRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct UpdateProxyRequest: Codable, JSONEncodable, Hashable {

    public var name: String
    public var destinationUrl: String
    public var requestReactorId: UUID?
    public var responseReactorId: UUID?
    public var requestTransform: ProxyTransform?
    public var responseTransform: ProxyTransform?
    public var application: Application?
    public var configuration: [String: String]?
    public var requireAuth: Bool?

    public init(name: String, destinationUrl: String, requestReactorId: UUID? = nil, responseReactorId: UUID? = nil, requestTransform: ProxyTransform? = nil, responseTransform: ProxyTransform? = nil, application: Application? = nil, configuration: [String: String]? = nil, requireAuth: Bool? = nil) {
        self.name = name
        self.destinationUrl = destinationUrl
        self.requestReactorId = requestReactorId
        self.responseReactorId = responseReactorId
        self.requestTransform = requestTransform
        self.responseTransform = responseTransform
        self.application = application
        self.configuration = configuration
        self.requireAuth = requireAuth
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case destinationUrl = "destination_url"
        case requestReactorId = "request_reactor_id"
        case responseReactorId = "response_reactor_id"
        case requestTransform = "request_transform"
        case responseTransform = "response_transform"
        case application
        case configuration
        case requireAuth = "require_auth"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encode(name, forKey: .name)
        try containerEncoder.encode(destinationUrl, forKey: .destinationUrl)
        try containerEncoder.encodeIfPresent(requestReactorId, forKey: .requestReactorId)
        try containerEncoder.encodeIfPresent(responseReactorId, forKey: .responseReactorId)
        try containerEncoder.encodeIfPresent(requestTransform, forKey: .requestTransform)
        try containerEncoder.encodeIfPresent(responseTransform, forKey: .responseTransform)
        try containerEncoder.encodeIfPresent(application, forKey: .application)
        try containerEncoder.encodeIfPresent(configuration, forKey: .configuration)
        try containerEncoder.encodeIfPresent(requireAuth, forKey: .requireAuth)
    }
}

