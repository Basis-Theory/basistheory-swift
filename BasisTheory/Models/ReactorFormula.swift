//
// ReactorFormula.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ReactorFormula: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var type: String?
    public var status: String?
    public var name: String?
    public var description: String?
    public var icon: String?
    public var code: String?
    public var createdBy: UUID?
    public var createdAt: Date?
    public var modifiedBy: UUID?
    public var modifiedAt: Date?
    public var configuration: [ReactorFormulaConfiguration]?
    public var requestParameters: [ReactorFormulaRequestParameter]?

    public init(id: UUID? = nil, type: String? = nil, status: String? = nil, name: String? = nil, description: String? = nil, icon: String? = nil, code: String? = nil, createdBy: UUID? = nil, createdAt: Date? = nil, modifiedBy: UUID? = nil, modifiedAt: Date? = nil, configuration: [ReactorFormulaConfiguration]? = nil, requestParameters: [ReactorFormulaRequestParameter]? = nil) {
        self.id = id
        self.type = type
        self.status = status
        self.name = name
        self.description = description
        self.icon = icon
        self.code = code
        self.createdBy = createdBy
        self.createdAt = createdAt
        self.modifiedBy = modifiedBy
        self.modifiedAt = modifiedAt
        self.configuration = configuration
        self.requestParameters = requestParameters
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case status
        case name
        case description
        case icon
        case code
        case createdBy = "created_by"
        case createdAt = "created_at"
        case modifiedBy = "modified_by"
        case modifiedAt = "modified_at"
        case configuration
        case requestParameters = "request_parameters"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(icon, forKey: .icon)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try container.encodeIfPresent(modifiedAt, forKey: .modifiedAt)
        try container.encodeIfPresent(configuration, forKey: .configuration)
        try container.encodeIfPresent(requestParameters, forKey: .requestParameters)
    }
}

