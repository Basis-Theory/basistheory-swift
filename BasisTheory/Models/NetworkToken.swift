//
// NetworkToken.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct NetworkToken: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var tenantId: UUID?
    public var data: Card?
    public var card: CardDetails?
    public var networkToken: CardDetails?
    public var par: String?
    public var status: String?
    public var createdBy: UUID?
    public var createdAt: Date?
    public var modifiedBy: UUID?
    public var modifiedAt: Date?
    public var tokenId: String?
    public var tokenIntentId: String?
    public var extras: NetworkTokenExtras?

    public init(id: String? = nil, tenantId: UUID? = nil, data: Card? = nil, card: CardDetails? = nil, networkToken: CardDetails? = nil, par: String? = nil, status: String? = nil, createdBy: UUID? = nil, createdAt: Date? = nil, modifiedBy: UUID? = nil, modifiedAt: Date? = nil, tokenId: String? = nil, tokenIntentId: String? = nil, extras: NetworkTokenExtras? = nil) {
        self.id = id
        self.tenantId = tenantId
        self.data = data
        self.card = card
        self.networkToken = networkToken
        self.par = par
        self.status = status
        self.createdBy = createdBy
        self.createdAt = createdAt
        self.modifiedBy = modifiedBy
        self.modifiedAt = modifiedAt
        self.tokenId = tokenId
        self.tokenIntentId = tokenIntentId
        self.extras = extras
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case tenantId = "tenant_id"
        case data
        case card
        case networkToken = "network_token"
        case par
        case status
        case createdBy = "created_by"
        case createdAt = "created_at"
        case modifiedBy = "modified_by"
        case modifiedAt = "modified_at"
        case tokenId = "token_id"
        case tokenIntentId = "token_intent_id"
        case extras = "_extras"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encodeIfPresent(id, forKey: .id)
        try containerEncoder.encodeIfPresent(tenantId, forKey: .tenantId)
        try containerEncoder.encodeIfPresent(data, forKey: .data)
        try containerEncoder.encodeIfPresent(card, forKey: .card)
        try containerEncoder.encodeIfPresent(networkToken, forKey: .networkToken)
        try containerEncoder.encodeIfPresent(par, forKey: .par)
        try containerEncoder.encodeIfPresent(status, forKey: .status)
        try containerEncoder.encodeIfPresent(createdBy, forKey: .createdBy)
        try containerEncoder.encodeIfPresent(createdAt, forKey: .createdAt)
        try containerEncoder.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try containerEncoder.encodeIfPresent(modifiedAt, forKey: .modifiedAt)
        try containerEncoder.encodeIfPresent(tokenId, forKey: .tokenId)
        try containerEncoder.encodeIfPresent(tokenIntentId, forKey: .tokenIntentId)
        try containerEncoder.encodeIfPresent(extras, forKey: .extras)
    }
}

