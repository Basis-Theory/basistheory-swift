//
// Reactor.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Reactor: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var tenantId: UUID?
    public var name: String?
    public var formula: ReactorFormula?
    public var application: Application?
    public var createdBy: UUID?
    public var createdAt: Date?
    public var modifiedBy: UUID?
    public var modifiedAt: Date?
    public var configuration: [String: String]?

    public init(id: UUID? = nil, tenantId: UUID? = nil, name: String? = nil, formula: ReactorFormula? = nil, application: Application? = nil, createdBy: UUID? = nil, createdAt: Date? = nil, modifiedBy: UUID? = nil, modifiedAt: Date? = nil, configuration: [String: String]? = nil) {
        self.id = id
        self.tenantId = tenantId
        self.name = name
        self.formula = formula
        self.application = application
        self.createdBy = createdBy
        self.createdAt = createdAt
        self.modifiedBy = modifiedBy
        self.modifiedAt = modifiedAt
        self.configuration = configuration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case tenantId = "tenant_id"
        case name
        case formula
        case application
        case createdBy = "created_by"
        case createdAt = "created_at"
        case modifiedBy = "modified_by"
        case modifiedAt = "modified_at"
        case configuration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encodeIfPresent(id, forKey: .id)
        try containerEncoder.encodeIfPresent(tenantId, forKey: .tenantId)
        try containerEncoder.encodeIfPresent(name, forKey: .name)
        try containerEncoder.encodeIfPresent(formula, forKey: .formula)
        try containerEncoder.encodeIfPresent(application, forKey: .application)
        try containerEncoder.encodeIfPresent(createdBy, forKey: .createdBy)
        try containerEncoder.encodeIfPresent(createdAt, forKey: .createdAt)
        try containerEncoder.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try containerEncoder.encodeIfPresent(modifiedAt, forKey: .modifiedAt)
        try containerEncoder.encodeIfPresent(configuration, forKey: .configuration)
    }
}

