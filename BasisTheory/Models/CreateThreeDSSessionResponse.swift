//
// CreateThreeDSSessionResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CreateThreeDSSessionResponse: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var type: String?
    public var cardBrand: String?
    public var methodUrl: String?
    public var methodNotificationUrl: String?
    public var directoryServerId: String?
    public var recommendedVersion: String?

    public init(id: UUID? = nil, type: String? = nil, cardBrand: String? = nil, methodUrl: String? = nil, methodNotificationUrl: String? = nil, directoryServerId: String? = nil, recommendedVersion: String? = nil) {
        self.id = id
        self.type = type
        self.cardBrand = cardBrand
        self.methodUrl = methodUrl
        self.methodNotificationUrl = methodNotificationUrl
        self.directoryServerId = directoryServerId
        self.recommendedVersion = recommendedVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case cardBrand
        case methodUrl = "method_url"
        case methodNotificationUrl = "method_notification_url"
        case directoryServerId = "directory_server_id"
        case recommendedVersion = "recommended_version"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encodeIfPresent(id, forKey: .id)
        try containerEncoder.encodeIfPresent(type, forKey: .type)
        try containerEncoder.encodeIfPresent(cardBrand, forKey: .cardBrand)
        try containerEncoder.encodeIfPresent(methodUrl, forKey: .methodUrl)
        try containerEncoder.encodeIfPresent(methodNotificationUrl, forKey: .methodNotificationUrl)
        try containerEncoder.encodeIfPresent(directoryServerId, forKey: .directoryServerId)
        try containerEncoder.encodeIfPresent(recommendedVersion, forKey: .recommendedVersion)
    }
}

