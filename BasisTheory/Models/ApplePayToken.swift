//
// ApplePayToken.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ApplePayToken: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var type: String?
    public var tenantId: UUID?
    public var status: String?
    public var expiresAt: Date?
    public var createdBy: UUID?
    public var createdAt: Date?
    public var modifiedBy: UUID?
    public var modifiedAt: Date?
    public var card: CardDetails?
    public var data: JSONValue?
    public var authentication: Authentication?

    public init(id: UUID? = nil, type: String? = nil, tenantId: UUID? = nil, status: String? = nil, expiresAt: Date? = nil, createdBy: UUID? = nil, createdAt: Date? = nil, modifiedBy: UUID? = nil, modifiedAt: Date? = nil, card: CardDetails? = nil, data: JSONValue? = nil, authentication: Authentication? = nil) {
        self.id = id
        self.type = type
        self.tenantId = tenantId
        self.status = status
        self.expiresAt = expiresAt
        self.createdBy = createdBy
        self.createdAt = createdAt
        self.modifiedBy = modifiedBy
        self.modifiedAt = modifiedAt
        self.card = card
        self.data = data
        self.authentication = authentication
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case tenantId = "tenant_id"
        case status
        case expiresAt = "expires_at"
        case createdBy = "created_by"
        case createdAt = "created_at"
        case modifiedBy = "modified_by"
        case modifiedAt = "modified_at"
        case card
        case data
        case authentication
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encodeIfPresent(id, forKey: .id)
        try containerEncoder.encodeIfPresent(type, forKey: .type)
        try containerEncoder.encodeIfPresent(tenantId, forKey: .tenantId)
        try containerEncoder.encodeIfPresent(status, forKey: .status)
        try containerEncoder.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try containerEncoder.encodeIfPresent(createdBy, forKey: .createdBy)
        try containerEncoder.encodeIfPresent(createdAt, forKey: .createdAt)
        try containerEncoder.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try containerEncoder.encodeIfPresent(modifiedAt, forKey: .modifiedAt)
        try containerEncoder.encodeIfPresent(card, forKey: .card)
        try containerEncoder.encodeIfPresent(data, forKey: .data)
        try containerEncoder.encodeIfPresent(authentication, forKey: .authentication)
    }
}

