//
// TokenReport.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TokenReport: Codable, JSONEncodable, Hashable {

    public var includedMonthlyActiveTokens: Int64?
    public var monthlyActiveTokens: Int64?
    public var metricsByType: [String: TokenMetrics]?
    public var monthlyActiveTokenHistory: [MonthlyActiveTokenHistory]?

    public init(includedMonthlyActiveTokens: Int64? = nil, monthlyActiveTokens: Int64? = nil, metricsByType: [String: TokenMetrics]? = nil, monthlyActiveTokenHistory: [MonthlyActiveTokenHistory]? = nil) {
        self.includedMonthlyActiveTokens = includedMonthlyActiveTokens
        self.monthlyActiveTokens = monthlyActiveTokens
        self.metricsByType = metricsByType
        self.monthlyActiveTokenHistory = monthlyActiveTokenHistory
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case includedMonthlyActiveTokens = "included_monthly_active_tokens"
        case monthlyActiveTokens = "monthly_active_tokens"
        case metricsByType = "metrics_by_type"
        case monthlyActiveTokenHistory = "monthly_active_token_history"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(includedMonthlyActiveTokens, forKey: .includedMonthlyActiveTokens)
        try container.encodeIfPresent(monthlyActiveTokens, forKey: .monthlyActiveTokens)
        try container.encodeIfPresent(metricsByType, forKey: .metricsByType)
        try container.encodeIfPresent(monthlyActiveTokenHistory, forKey: .monthlyActiveTokenHistory)
    }
}

