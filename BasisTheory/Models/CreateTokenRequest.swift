//
// CreateTokenRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CreateTokenRequest: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var type: String?
    public var data: JSONValue?
    public var encrypted: String?
    public var privacy: Privacy?
    public var metadata: [String: String]?
    public var searchIndexes: [String]?
    public var fingerprintExpression: String?
    public var mask: JSONValue?
    public var deduplicateToken: Bool?
    public var expiresAt: String?
    public var containers: [String]?
    public var tokenIntentId: String?

    public init(id: String? = nil, type: String? = nil, data: JSONValue? = nil, encrypted: String? = nil, privacy: Privacy? = nil, metadata: [String: String]? = nil, searchIndexes: [String]? = nil, fingerprintExpression: String? = nil, mask: JSONValue? = nil, deduplicateToken: Bool? = nil, expiresAt: String? = nil, containers: [String]? = nil, tokenIntentId: String? = nil) {
        self.id = id
        self.type = type
        self.data = data
        self.encrypted = encrypted
        self.privacy = privacy
        self.metadata = metadata
        self.searchIndexes = searchIndexes
        self.fingerprintExpression = fingerprintExpression
        self.mask = mask
        self.deduplicateToken = deduplicateToken
        self.expiresAt = expiresAt
        self.containers = containers
        self.tokenIntentId = tokenIntentId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case data
        case encrypted
        case privacy
        case metadata
        case searchIndexes = "search_indexes"
        case fingerprintExpression = "fingerprint_expression"
        case mask
        case deduplicateToken = "deduplicate_token"
        case expiresAt = "expires_at"
        case containers
        case tokenIntentId = "token_intent_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encodeIfPresent(id, forKey: .id)
        try containerEncoder.encodeIfPresent(type, forKey: .type)
        try containerEncoder.encodeIfPresent(data, forKey: .data)
        try containerEncoder.encodeIfPresent(encrypted, forKey: .encrypted)
        try containerEncoder.encodeIfPresent(privacy, forKey: .privacy)
        try containerEncoder.encodeIfPresent(metadata, forKey: .metadata)
        try containerEncoder.encodeIfPresent(searchIndexes, forKey: .searchIndexes)
        try containerEncoder.encodeIfPresent(fingerprintExpression, forKey: .fingerprintExpression)
        try containerEncoder.encodeIfPresent(mask, forKey: .mask)
        try containerEncoder.encodeIfPresent(deduplicateToken, forKey: .deduplicateToken)
        try containerEncoder.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try containerEncoder.encodeIfPresent(containers, forKey: .containers)
        try containerEncoder.encodeIfPresent(tokenIntentId, forKey: .tokenIntentId)
    }
}

