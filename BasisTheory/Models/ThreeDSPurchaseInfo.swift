//
// ThreeDSPurchaseInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ThreeDSPurchaseInfo: Codable, JSONEncodable, Hashable {

    public var amount: String?
    public var currency: String?
    public var exponent: String?
    public var date: String?
    public var transactionType: String?
    public var installmentCount: String?
    public var recurringExpiration: String?
    public var recurringFrequency: String?

    public init(amount: String? = nil, currency: String? = nil, exponent: String? = nil, date: String? = nil, transactionType: String? = nil, installmentCount: String? = nil, recurringExpiration: String? = nil, recurringFrequency: String? = nil) {
        self.amount = amount
        self.currency = currency
        self.exponent = exponent
        self.date = date
        self.transactionType = transactionType
        self.installmentCount = installmentCount
        self.recurringExpiration = recurringExpiration
        self.recurringFrequency = recurringFrequency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case currency
        case exponent
        case date
        case transactionType = "transaction_type"
        case installmentCount = "installment_count"
        case recurringExpiration = "recurring_expiration"
        case recurringFrequency = "recurring_frequency"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encodeIfPresent(amount, forKey: .amount)
        try containerEncoder.encodeIfPresent(currency, forKey: .currency)
        try containerEncoder.encodeIfPresent(exponent, forKey: .exponent)
        try containerEncoder.encodeIfPresent(date, forKey: .date)
        try containerEncoder.encodeIfPresent(transactionType, forKey: .transactionType)
        try containerEncoder.encodeIfPresent(installmentCount, forKey: .installmentCount)
        try containerEncoder.encodeIfPresent(recurringExpiration, forKey: .recurringExpiration)
        try containerEncoder.encodeIfPresent(recurringFrequency, forKey: .recurringFrequency)
    }
}

