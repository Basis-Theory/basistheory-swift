//
// ThreeDSCardholderAccountInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ThreeDSCardholderAccountInfo: Codable, JSONEncodable, Hashable {

    public var accountAge: String?
    public var accountLastChanged: String?
    public var accountChangeDate: String?
    public var accountCreatedDate: String?
    public var accountPwdLastChanged: String?
    public var accountPwdChangeDate: String?
    public var purchaseCountHalfYear: String?
    public var transactionCountDay: String?
    public var paymentAccountAge: String?
    public var transactionCountYear: String?
    public var paymentAccountCreated: String?
    public var shippingAddressFirstUsed: String?
    public var shippingAddressUsageDate: String?
    public var shippingAccountNameMatch: Bool?
    public var suspiciousActivityObserved: Bool?

    public init(accountAge: String? = nil, accountLastChanged: String? = nil, accountChangeDate: String? = nil, accountCreatedDate: String? = nil, accountPwdLastChanged: String? = nil, accountPwdChangeDate: String? = nil, purchaseCountHalfYear: String? = nil, transactionCountDay: String? = nil, paymentAccountAge: String? = nil, transactionCountYear: String? = nil, paymentAccountCreated: String? = nil, shippingAddressFirstUsed: String? = nil, shippingAddressUsageDate: String? = nil, shippingAccountNameMatch: Bool? = nil, suspiciousActivityObserved: Bool? = nil) {
        self.accountAge = accountAge
        self.accountLastChanged = accountLastChanged
        self.accountChangeDate = accountChangeDate
        self.accountCreatedDate = accountCreatedDate
        self.accountPwdLastChanged = accountPwdLastChanged
        self.accountPwdChangeDate = accountPwdChangeDate
        self.purchaseCountHalfYear = purchaseCountHalfYear
        self.transactionCountDay = transactionCountDay
        self.paymentAccountAge = paymentAccountAge
        self.transactionCountYear = transactionCountYear
        self.paymentAccountCreated = paymentAccountCreated
        self.shippingAddressFirstUsed = shippingAddressFirstUsed
        self.shippingAddressUsageDate = shippingAddressUsageDate
        self.shippingAccountNameMatch = shippingAccountNameMatch
        self.suspiciousActivityObserved = suspiciousActivityObserved
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountAge = "account_age"
        case accountLastChanged = "account_last_changed"
        case accountChangeDate = "account_change_date"
        case accountCreatedDate = "account_created_date"
        case accountPwdLastChanged = "account_pwd_last_changed"
        case accountPwdChangeDate = "account_pwd_change_date"
        case purchaseCountHalfYear = "purchase_count_half_year"
        case transactionCountDay = "transaction_count_day"
        case paymentAccountAge = "payment_account_age"
        case transactionCountYear = "transaction_count_year"
        case paymentAccountCreated = "payment_account_created"
        case shippingAddressFirstUsed = "shipping_address_first_used"
        case shippingAddressUsageDate = "shipping_address_usage_date"
        case shippingAccountNameMatch = "shipping_account_name_match"
        case suspiciousActivityObserved = "suspicious_activity_observed"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var containerEncoder = encoder.container(keyedBy: CodingKeys.self)
        try containerEncoder.encodeIfPresent(accountAge, forKey: .accountAge)
        try containerEncoder.encodeIfPresent(accountLastChanged, forKey: .accountLastChanged)
        try containerEncoder.encodeIfPresent(accountChangeDate, forKey: .accountChangeDate)
        try containerEncoder.encodeIfPresent(accountCreatedDate, forKey: .accountCreatedDate)
        try containerEncoder.encodeIfPresent(accountPwdLastChanged, forKey: .accountPwdLastChanged)
        try containerEncoder.encodeIfPresent(accountPwdChangeDate, forKey: .accountPwdChangeDate)
        try containerEncoder.encodeIfPresent(purchaseCountHalfYear, forKey: .purchaseCountHalfYear)
        try containerEncoder.encodeIfPresent(transactionCountDay, forKey: .transactionCountDay)
        try containerEncoder.encodeIfPresent(paymentAccountAge, forKey: .paymentAccountAge)
        try containerEncoder.encodeIfPresent(transactionCountYear, forKey: .transactionCountYear)
        try containerEncoder.encodeIfPresent(paymentAccountCreated, forKey: .paymentAccountCreated)
        try containerEncoder.encodeIfPresent(shippingAddressFirstUsed, forKey: .shippingAddressFirstUsed)
        try containerEncoder.encodeIfPresent(shippingAddressUsageDate, forKey: .shippingAddressUsageDate)
        try containerEncoder.encodeIfPresent(shippingAccountNameMatch, forKey: .shippingAccountNameMatch)
        try containerEncoder.encodeIfPresent(suspiciousActivityObserved, forKey: .suspiciousActivityObserved)
    }
}

