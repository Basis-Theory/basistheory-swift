//
// ConnectionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ConnectionsAPI {

    /**

     - parameter applePayDomainDeregistrationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func applePayDomainDeregistration(applePayDomainDeregistrationRequest: ApplePayDomainDeregistrationRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await applePayDomainDeregistrationWithRequestBuilder(applePayDomainDeregistrationRequest: applePayDomainDeregistrationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /connections/apple-pay/domain-deregistration
     - API Key:
       - type: apiKey BT-API-KEY (HEADER)
       - name: ApiKey
     - parameter applePayDomainDeregistrationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func applePayDomainDeregistrationWithRequestBuilder(applePayDomainDeregistrationRequest: ApplePayDomainDeregistrationRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/connections/apple-pay/domain-deregistration"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applePayDomainDeregistrationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applePayDomainRegistrationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApplePayDomainRegistrationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func applePayDomainRegistration(applePayDomainRegistrationRequest: ApplePayDomainRegistrationRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) async throws(ErrorResponse) -> ApplePayDomainRegistrationResponse {
        return try await applePayDomainRegistrationWithRequestBuilder(applePayDomainRegistrationRequest: applePayDomainRegistrationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /connections/apple-pay/domain-registration
     - API Key:
       - type: apiKey BT-API-KEY (HEADER)
       - name: ApiKey
     - parameter applePayDomainRegistrationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApplePayDomainRegistrationResponse> 
     */
    open class func applePayDomainRegistrationWithRequestBuilder(applePayDomainRegistrationRequest: ApplePayDomainRegistrationRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) -> RequestBuilder<ApplePayDomainRegistrationResponse> {
        let localVariablePath = "/connections/apple-pay/domain-registration"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applePayDomainRegistrationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplePayDomainRegistrationResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApplePayDomainRegistrationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func applePayGetDomainRegistration(apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) async throws(ErrorResponse) -> ApplePayDomainRegistrationResponse {
        return try await applePayGetDomainRegistrationWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /connections/apple-pay/domain-registration
     - API Key:
       - type: apiKey BT-API-KEY (HEADER)
       - name: ApiKey
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApplePayDomainRegistrationResponse> 
     */
    open class func applePayGetDomainRegistrationWithRequestBuilder(apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) -> RequestBuilder<ApplePayDomainRegistrationResponse> {
        let localVariablePath = "/connections/apple-pay/domain-registration"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplePayDomainRegistrationResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applePayDomainRegistrationListRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApplePayDomainRegistrationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func applePayPutDomainRegistration(applePayDomainRegistrationListRequest: ApplePayDomainRegistrationListRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) async throws(ErrorResponse) -> ApplePayDomainRegistrationResponse {
        return try await applePayPutDomainRegistrationWithRequestBuilder(applePayDomainRegistrationListRequest: applePayDomainRegistrationListRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /connections/apple-pay/domain-registration
     - API Key:
       - type: apiKey BT-API-KEY (HEADER)
       - name: ApiKey
     - parameter applePayDomainRegistrationListRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApplePayDomainRegistrationResponse> 
     */
    open class func applePayPutDomainRegistrationWithRequestBuilder(applePayDomainRegistrationListRequest: ApplePayDomainRegistrationListRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) -> RequestBuilder<ApplePayDomainRegistrationResponse> {
        let localVariablePath = "/connections/apple-pay/domain-registration"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applePayDomainRegistrationListRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplePayDomainRegistrationResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applePaySessionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: String
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func applePaySession(applePaySessionRequest: ApplePaySessionRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) async throws(ErrorResponse) -> String {
        return try await applePaySessionWithRequestBuilder(applePaySessionRequest: applePaySessionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /connections/apple-pay/session
     - API Key:
       - type: apiKey BT-API-KEY (HEADER)
       - name: ApiKey
     - parameter applePaySessionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<String> 
     */
    open class func applePaySessionWithRequestBuilder(applePaySessionRequest: ApplePaySessionRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) -> RequestBuilder<String> {
        let localVariablePath = "/connections/apple-pay/session"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applePaySessionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applePayTokenizeRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApplePayTokenizeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func applePayTokenize(applePayTokenizeRequest: ApplePayTokenizeRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) async throws(ErrorResponse) -> ApplePayTokenizeResponse {
        return try await applePayTokenizeWithRequestBuilder(applePayTokenizeRequest: applePayTokenizeRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /connections/apple-pay/tokenize
     - API Key:
       - type: apiKey BT-API-KEY (HEADER)
       - name: ApiKey
     - parameter applePayTokenizeRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApplePayTokenizeResponse> 
     */
    open class func applePayTokenizeWithRequestBuilder(applePayTokenizeRequest: ApplePayTokenizeRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) -> RequestBuilder<ApplePayTokenizeResponse> {
        let localVariablePath = "/connections/apple-pay/tokenize"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applePayTokenizeRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplePayTokenizeResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter googlePayTokenizeRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GooglePayTokenizeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func payTokenize(googlePayTokenizeRequest: GooglePayTokenizeRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) async throws(ErrorResponse) -> GooglePayTokenizeResponse {
        return try await payTokenizeWithRequestBuilder(googlePayTokenizeRequest: googlePayTokenizeRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /connections/google-pay/tokenize
     - API Key:
       - type: apiKey BT-API-KEY (HEADER)
       - name: ApiKey
     - parameter googlePayTokenizeRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GooglePayTokenizeResponse> 
     */
    open class func payTokenizeWithRequestBuilder(googlePayTokenizeRequest: GooglePayTokenizeRequest? = nil, apiConfiguration: BasisTheoryAPIConfiguration = BasisTheoryAPIConfiguration.shared) -> RequestBuilder<GooglePayTokenizeResponse> {
        let localVariablePath = "/connections/google-pay/tokenize"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: googlePayTokenizeRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GooglePayTokenizeResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
